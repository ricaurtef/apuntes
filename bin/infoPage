#!/bin/bash

# Programa para mostrar una pagina de informacion del sistema


# Definicion de variables/constantes
PROGNAME=$(basename $0)
TITLE="System Information Report For: $HOSTNAME"
CURRENT_TIME=$(date +"%x %r %Z")
TIME_STAMP="Generated $CURRENT_TIME, by $USER"
interactive=
filename=


# Definicion de funciones
reportUpTime (){
cat <<- _EOF_
      <h2>System Uptime</h2>
      <pre>
	 Since: $(uptime -s | sed -E \
         's/^([0-9]{4})-([0-9]{2})-([0-9]{2})/\2-\3-\1/')
         Total: $(uptime -p)
      </pre>
_EOF_
   
return
}

reportDiskSpace (){
cat <<- _EOF_
      <h2>Disk Space Utilization</h2>
      <pre>
	 $(df -h)
      </pre>
_EOF_

return
}

reportHomeSpace (){
echo "<h2>Top 5 Home Space Utilization</h2>"
if [[ $(id -u) == 0 ]]; then
cat <<- _EOF_
      <pre>
	 $(du -sh /home/* | sort -rh | head -n 5)
      </pre>
_EOF_
else
cat <<- _EOF_
      <pre>
	 $(du -h $HOME | sort -rh | head -n 5)
      </pre>
_EOF_
fi
return
}

usage () {
   echo "$PROGNAME: usage: $PROGNAME [-f file | -i]"
   return
}

write_html_page () {
cat <<- _EOF_
<html>
   <head>
      <title>$TITLE</title>
   </head>
   <body>
      <h1>$TITLE</h1>
      <p>$TIME_STAMP</p>
      <p>
	 $(reportUpTime)
	 $(reportDiskSpace)
	 $(reportHomeSpace)
      </p>
   </body>
</html>
_EOF_
return
}

# process command line options

while [[ -n $1 ]]; do
   case $1 in
      -f | --file)              shift
                                filename=$1
                                ;;
      -i | --interactive)       interactive=1
                                ;;
      -h | --help)              usage
                                exit
                                ;;
      *)                        usage >&2
                                exit 1
                                ;;
   esac
   shift
done

# interactive mode

if [[ -n $interactive ]]; then
   while true; do
      read -p "Enter name of output file: " filename
      if [[ -e $filename ]]; then
         read -p "'$filename' exists. Overwrite? [y/n/q] > "
         case $REPLY in
            y|Y)        break
                        ;;
            q|Q)        echo "Program terminated."
                        exit
                        ;;
            *)          continue
                        ;;
         esac
      elif [[ -z $filename ]]; then
         continue
      else
         break
      fi
   done
fi

# output html page

if [[ -n $filename ]]; then
   if touch $filename && [[ -f $filename ]]; then
      write_html_page > $filename
   else
      echo "$PROGNAME: Cannot write file '$filename'" >&2
      exit 1
   fi
else
   write_html_page
fi


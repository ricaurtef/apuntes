- Sobre un escenario limpio:

# Objetivos:

- Máquinas que se puedan ejecutar en diferentes nodos de computación, pero que estén
 en la misma red local
- Máquinas que se ejecutan en el mismo nodo de computación, pero que estén en diferente
 red local
- Reglas de cortafuegos definidas por máquina, no por red
- Tráfico seguro entre nodos de computación
- Entrada y salida de las máquinas virtuales al exterior
- Un servidor DHCP por cada subred que no interfiera con los de otras subredes

## En primer lugar veremos creación de redes privadas y conexión entre máquinas 
virtuales de la misma red

### L2 Layer2 Capa 2 Nivel de enlace Ethernet

Parámetros relevantes: bridges, puertos y direcciones MAC

red-limpia.png

# Mostramos que no hay ningún bridge-linux:

[root@rdo ~]# brctl show
bridge name	bridge id		STP enabled	interfaces

# Mostramos los puentes que hay de OpenvSwitch:

ovs-vsctl list-br

# Nos centramos en L2, br-int

[root@rdo ~]# ovs-ofctl show br-int
OFPT_FEATURES_REPLY (xid=0x2): dpid:000032e2b607a841
n_tables:254, n_buffers:256
capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP
actions: OUTPUT SET_VLAN_VID SET_VLAN_PCP STRIP_VLAN SET_DL_SRC SET_DL_DST SET_NW_SRC SET_NW_DST SET_NW_TOS SET_TP_SRC SET_TP_DST ENQUEUE
 1(patch-tun): addr:fa:82:c1:68:15:38
     config:     0
     state:      0
     speed: 0 Mbps now, 0 Mbps max
 LOCAL(br-int): addr:32:e2:b6:07:a8:41
     config:     0
     state:      0
     speed: 0 Mbps now, 0 Mbps max
OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0

# Vemos que de momento br-int está conectado con br-tun 

# Creamos la primera red privada:

[root@rdo ~]# neutron net-create privada
Created a new network:
+----------------+--------------------------------------+
| Field          | Value                                |
+----------------+--------------------------------------+
| admin_state_up | True                                 |
| id             | f84a328e-407e-4ca6-87bb-ec148853c585 |
| name           | privada                              |
| shared         | False                                |
| status         | ACTIVE                               |
| subnets        |                                      |
| tenant_id      | 4beb810ce40f49659e0bca732e4f1a3c     |
+----------------+--------------------------------------+

# Esto de momento, no tiene ningún efecto sobre las switches

# Creamos una subred asociada a esta red

[root@rdo ~]# neutron subnet-create f84a328e-407e-4ca6-87bb-ec148853c585 10.0.0.0/24
Created a new subnet:
+------------------+--------------------------------------------+
| Field            | Value                                      |
+------------------+--------------------------------------------+
| allocation_pools | {"start": "10.0.0.2", "end": "10.0.0.254"} |
| cidr             | 10.0.0.0/24                                |
| dns_nameservers  |                                            |
| enable_dhcp      | True                                       |
| gateway_ip       | 10.0.0.1                                   |
| host_routes      |                                            |
| id               | d4bb2d0e-2af7-44fe-9729-4e3b95766e28       |
| ip_version       | 4                                          |
| name             |                                            |
| network_id       | f84a328e-407e-4ca6-87bb-ec148853c585       |
| tenant_id        | 4beb810ce40f49659e0bca732e4f1a3c           |
+------------------+--------------------------------------------+

# Sin efecto sobre los switches o interfaces de red

# Lanzamos una instancia sobre la red

[root@rdo ~]# nova boot --image 4ddb27ab-b3cc-4a65-ac52-f4ce7894e4ed \
--flavor 1 \
--key_name clave-openstack \
--nic net-id=f84a328e-407e-4ca6-87bb-ec148853c585\
 test

# Si ejecutamos:

[root@rdo ~]# ovs-ofctl show br-int
...
 2(tap79712efb-32): addr:30:02:00:00:00:00
     config:     PORT_DOWN
     state:      LINK_DOWN
     speed: 0 Mbps now, 0 Mbps max
 3(qvob079c24c-83): addr:ae:49:25:f2:4a:1c
     config:     0
     state:      0
     current:    10GB-FD COPPER
     speed: 10000 Mbps now, 0 Mbps max
...

# Vamos que se etiqueta automáticamente la VLAN como 1:
[root@rdo ~]# ovs-vsctl show
...
    Bridge br-int
        Port "qvob079c24c-83"
            tag: 1
            Interface "qvob079c24c-83"
        Port "tap79712efb-32"
            tag: 1
            Interface "tap79712efb-32"
                type: internal
...

# Vemos que aparecen dos puertos nuevos:

[root@rdo log]# neutron port-list
+--------------------------------------+------+-------------------+---------------------------------------------------------------------------------+
| id                                   | name | mac_address       | fixed_ips                                                                       |
+--------------------------------------+------+-------------------+---------------------------------------------------------------------------------+
| 79712efb-320d-407d-82d7-eafd7eb51abe |      | fa:16:3e:dd:ff:a4 | {"subnet_id": "d4bb2d0e-2af7-44fe-9729-4e3b95766e28", "ip_address": "10.0.0.3"} |
| b079c24c-8386-47db-a730-35b3a99419e8 |      | fa:16:3e:79:3b:ac | {"subnet_id": "d4bb2d0e-2af7-44fe-9729-4e3b95766e28", "ip_address": "10.0.0.2"} |
+--------------------------------------+------+-------------------+---------------------------------------------------------------------------------+

El que tiene la dirección IP 10.0.0.3 se corresponde con un servidor DHCP que se ha 
creado (lo veremos más adelante), en que tiene la dirección IP 10.0.0.2 se corresponde
con la máquina que hemos creado y nos quedamos con su ID:

b079c24c-8386-47db-a730-35b3a99419e8

Como se tienen que crear varias interfaces de red asociadas a este puerto y el UUID es 
demasiado largo, nos quedamos con los 11 primeros caracteres (b079c24c-83).

# En el nodo de computación aparecen 4 interfaces nuevas:

13: qbrb079c24c-83: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN 
    link/ether de:a1:64:29:9d:40 brd ff:ff:ff:ff:ff:ff
14: qvob079c24c-83: <BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether ae:49:25:f2:4a:1c brd ff:ff:ff:ff:ff:ff
15: qvbb079c24c-83: <BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether de:a1:64:29:9d:40 brd ff:ff:ff:ff:ff:ff
16: tapb079c24c-83: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 500
    link/ether fe:16:3e:79:3b:ac brd ff:ff:ff:ff:ff:ff

qbr: Linux bridge
qvo: Puerto en br-int
qvb: Puerto en linux bridge
tap: Interfaz de red de la máquina

# Comprobamos que qvoXXXXX está conectado a br-int:

[root@rdo log]# ovs-ofctl show br-int
OFPT_FEATURES_REPLY (xid=0x2): dpid:000032e2b607a841
n_tables:254, n_buffers:256
capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP
actions: OUTPUT SET_VLAN_VID SET_VLAN_PCP STRIP_VLAN SET_DL_SRC SET_DL_DST SET_NW_SRC SET_NW_DST SET_NW_TOS SET_TP_SRC SET_TP_DST ENQUEUE
 1(patch-tun): addr:fa:82:c1:68:15:38
     config:     0
     state:      0
     speed: 0 Mbps now, 0 Mbps max
 2(tap79712efb-32): addr:30:02:00:00:00:00
     config:     PORT_DOWN
     state:      LINK_DOWN
     speed: 0 Mbps now, 0 Mbps max
 3(qvob079c24c-83): addr:ae:49:25:f2:4a:1c
     config:     0
     state:      0
     current:    10GB-FD COPPER
     speed: 10000 Mbps now, 0 Mbps max
 LOCAL(br-int): addr:32:e2:b6:07:a8:41
     config:     0
     state:      0
     speed: 0 Mbps now, 0 Mbps max
OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0

La interfaz tap79712efb-32 está asociada al puerto del DHCP y está en el nodo de red.

# Comprobamos el nuevo bridge linux que se ha creado con las interfaces tapXXXX y qvbXXXX 
[root@rdo log]# brctl show qbrb079c24c-83
bridge name	bridge id		STP enabled	interfaces
qbrb079c24c-83		8000.dea164299d40	no		qvbb079c24c-83
							tapb079c24c-83

# Esto es necesario para aplicar específicamente las reglas de cortafuegos en tapXXXX que
# parece que hay problemas si tapXXX está conectado a OpenvSwitch ?????

# Comprobamos las nuevas reglas de iptables que se han creado en el nodo de 
computación (en este caso se crean reglas utilizando sólo los 10 primeros caracteres 
del uuid):

[root@rdo ~]# iptables -S |grep b079c24c-8 
-N neutron-openvswi-ib079c24c-8
-N neutron-openvswi-ob079c24c-8
-N neutron-openvswi-sb079c24c-8
-A neutron-openvswi-FORWARD -m physdev --physdev-out tapb079c24c-83 --physdev-is-bridged -j neutron-openvswi-sg-chain 
-A neutron-openvswi-FORWARD -m physdev --physdev-in tapb079c24c-83 --physdev-is-bridged -j neutron-openvswi-sg-chain 
-A neutron-openvswi-INPUT -m physdev --physdev-in tapb079c24c-83 --physdev-is-bridged -j neutron-openvswi-ob079c24c-8 
-A neutron-openvswi-ib079c24c-8 -m state --state INVALID -j DROP 
-A neutron-openvswi-ib079c24c-8 -m state --state RELATED,ESTABLISHED -j RETURN 
-A neutron-openvswi-ib079c24c-8 -p icmp -j RETURN 
-A neutron-openvswi-ib079c24c-8 -s 10.0.0.3/32 -p udp -m udp --sport 67 --dport 68 -j RETURN 
-A neutron-openvswi-ib079c24c-8 -j neutron-openvswi-sg-fallback 
-A neutron-openvswi-ob079c24c-8 -p udp -m udp --sport 68 --dport 67 -j RETURN 
-A neutron-openvswi-ob079c24c-8 -j neutron-openvswi-sb079c24c-8 
-A neutron-openvswi-ob079c24c-8 -p udp -m udp --sport 67 --dport 68 -j DROP 
-A neutron-openvswi-ob079c24c-8 -m state --state INVALID -j DROP 
-A neutron-openvswi-ob079c24c-8 -m state --state RELATED,ESTABLISHED -j RETURN 
-A neutron-openvswi-ob079c24c-8 -p icmp -j RETURN 
-A neutron-openvswi-ob079c24c-8 -p udp -m udp -m multiport --dports 1:65535 -j RETURN 
-A neutron-openvswi-ob079c24c-8 -p tcp -m tcp -m multiport --dports 1:65535 -j RETURN 
-A neutron-openvswi-ob079c24c-8 -j neutron-openvswi-sg-fallback 
-A neutron-openvswi-sb079c24c-8 -s 10.0.0.2/32 -m mac --mac-source FA:16:3E:79:3B:AC -j RETURN 
-A neutron-openvswi-sb079c24c-8 -j DROP 
-A neutron-openvswi-sg-chain -m physdev --physdev-out tapb079c24c-83 --physdev-is-bridged -j neutron-openvswi-ib079c24c-8 
-A neutron-openvswi-sg-chain -m physdev --physdev-in tapb079c24c-83 --physdev-is-bridged -j neutron-openvswi-ob079c24c-8 

# Servidor DHCP (En el nodo de red)

# Se utiliza linux network namespaces, un modo de virtualización de la red

# Ejecutamos:

[root@rdo log]# ip netns
qdhcp-f84a328e-407e-4ca6-87bb-ec148853c585

# Vemos que se ha creado un espacio de nombres que empieza por dhcp, podemos ejecutar 
comandos en ese espacio de nombres de forma independiente del sistema:

[root@rdo log]# ip netns exec qdhcp-f84a328e-407e-4ca6-87bb-ec148853c585 ip link show
11: tap79712efb-32: <BROADCAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN 
    link/ether fa:16:3e:dd:ff:a4 brd ff:ff:ff:ff:ff:ff
12: lo: <LOOPBACK,UP,LOWER_UP> mtu 16436 qdisc noqueue state UNKNOWN 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00

Comprobamos que el dispositivo tap79712efb-32 está en este espacio de nombres

Podemos ver también el proceso DHCP (con dnsmasq) que se está ejecutando en el nodo de red
para darle IP dinámica a las instancias:

[root@rdo log]# ps aux|grep --color f84a328e-407e-4ca6-87bb-ec148853c585
nobody   19821  0.0  0.0  12888   652 ?        S    10:15   0:00 dnsmasq --no-hosts --no-resolv --strict-order --bind-interfaces --interface=tap79712efb-32 --except-interface=lo --pid-file=/var/lib/neutron/dhcp/f84a328e-407e-4ca6-87bb-ec148853c585/pid --dhcp-hostsfile=/var/lib/neutron/dhcp/f84a328e-407e-4ca6-87bb-ec148853c585/host --dhcp-optsfile=/var/lib/neutron/dhcp/f84a328e-407e-4ca6-87bb-ec148853c585/opts --leasefile-ro --dhcp-range=tag0,10.0.0.0,static,86400s --dhcp-lease-max=256 --conf-file= --domain=openstacklocal

Podemos acceder al directorio:

[root@rdo log]# cd /var/lib/neutron/dhcp/
[root@rdo dhcp]# ls
f84a328e-407e-4ca6-87bb-ec148853c585

Y comprobar que existe una reserva para la MAC de la instancia:

[root@rdo f84a328e-407e-4ca6-87bb-ec148853c585]# cat host 
fa:16:3e:79:3b:ac,host-10-0-0-2.openstacklocal,10.0.0.2

## Levantamos una segunda instancia en la misma red:

# Listamos los puertos:

[root@rdo ~]# neutron port-list
+--------------------------------------+------+-------------------+---------------------------------------------------------------------------------+
| id                                   | name | mac_address       | fixed_ips                                                                       |
+--------------------------------------+------+-------------------+---------------------------------------------------------------------------------+
| 6a6ac39c-61fb-46a5-bd39-e8ba1701d103 |      | fa:16:3e:eb:2c:d3 | {"subnet_id": "d4bb2d0e-2af7-44fe-9729-4e3b95766e28", "ip_address": "10.0.0.4"} |

Luego tiene que haber nuevas interfaces de red:

[root@rdo ~]# ip link show|grep 6a6ac39c-61
17: qbr6a6ac39c-61: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN 
18: qvo6a6ac39c-61: <BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
19: qvb6a6ac39c-61: <BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
20: tap6a6ac39c-61: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 500

Comprobamos que qvoXXXX está conectado a br-int:

[root@rdo ~]# ovs-ofctl show br-int
OFPT_FEATURES_REPLY (xid=0x2): dpid:000032e2b607a841
n_tables:254, n_buffers:256
capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP
actions: OUTPUT SET_VLAN_VID SET_VLAN_PCP STRIP_VLAN SET_DL_SRC SET_DL_DST SET_NW_SRC SET_NW_DST SET_NW_TOS SET_TP_SRC SET_TP_DST ENQUEUE
 1(patch-tun): addr:fa:82:c1:68:15:38
     config:     0
     state:      0
     speed: 0 Mbps now, 0 Mbps max
 2(tap79712efb-32): addr:30:02:00:00:00:00
     config:     PORT_DOWN
     state:      LINK_DOWN
     speed: 0 Mbps now, 0 Mbps max
 3(qvob079c24c-83): addr:ae:49:25:f2:4a:1c
     config:     0
     state:      0
     current:    10GB-FD COPPER
     speed: 10000 Mbps now, 0 Mbps max
 4(qvo6a6ac39c-61): addr:0e:7e:7b:30:4a:bc
     config:     0
     state:      0
     current:    10GB-FD COPPER
     speed: 10000 Mbps now, 0 Mbps max
 LOCAL(br-int): addr:32:e2:b6:07:a8:41
     config:     0
     state:      0
     speed: 0 Mbps now, 0 Mbps max
OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0

Y vemos el nuevo bridge linux:

[root@rdo ~]# brctl show qbr6a6ac39c-61
bridge name	bridge id		STP enabled	interfaces
qbr6a6ac39c-61		8000.96a4ec71dea6	no		qvb6a6ac39c-61
							tap6a6ac39c-61

Lógicamente hay nuevas reglas de iptables para tapXXXXX:

[root@rdo ~]# iptables -S |grep 6a6ac39c-6
-N neutron-openvswi-i6a6ac39c-6
-N neutron-openvswi-o6a6ac39c-6
-N neutron-openvswi-s6a6ac39c-6
-A neutron-openvswi-FORWARD -m physdev --physdev-out tap6a6ac39c-61 --physdev-is-bridged -j neutron-openvswi-sg-chain 
-A neutron-openvswi-FORWARD -m physdev --physdev-in tap6a6ac39c-61 --physdev-is-bridged -j neutron-openvswi-sg-chain 
-A neutron-openvswi-INPUT -m physdev --physdev-in tap6a6ac39c-61 --physdev-is-bridged -j neutron-openvswi-o6a6ac39c-6 
-A neutron-openvswi-i6a6ac39c-6 -m state --state INVALID -j DROP 
-A neutron-openvswi-i6a6ac39c-6 -m state --state RELATED,ESTABLISHED -j RETURN 
-A neutron-openvswi-i6a6ac39c-6 -p icmp -j RETURN 
-A neutron-openvswi-i6a6ac39c-6 -s 10.0.0.3/32 -p udp -m udp --sport 67 --dport 68 -j RETURN 
-A neutron-openvswi-i6a6ac39c-6 -j neutron-openvswi-sg-fallback 
-A neutron-openvswi-o6a6ac39c-6 -p udp -m udp --sport 68 --dport 67 -j RETURN 
-A neutron-openvswi-o6a6ac39c-6 -j neutron-openvswi-s6a6ac39c-6 
-A neutron-openvswi-o6a6ac39c-6 -p udp -m udp --sport 67 --dport 68 -j DROP 
-A neutron-openvswi-o6a6ac39c-6 -m state --state INVALID -j DROP 
-A neutron-openvswi-o6a6ac39c-6 -m state --state RELATED,ESTABLISHED -j RETURN 
-A neutron-openvswi-o6a6ac39c-6 -p icmp -j RETURN 
-A neutron-openvswi-o6a6ac39c-6 -p udp -m udp -m multiport --dports 1:65535 -j RETURN 
-A neutron-openvswi-o6a6ac39c-6 -p tcp -m tcp -m multiport --dports 1:65535 -j RETURN 
-A neutron-openvswi-o6a6ac39c-6 -j neutron-openvswi-sg-fallback 
-A neutron-openvswi-s6a6ac39c-6 -s 10.0.0.4/32 -m mac --mac-source FA:16:3E:EB:2C:D3 -j RETURN 
-A neutron-openvswi-s6a6ac39c-6 -j DROP 
-A neutron-openvswi-sg-chain -m physdev --physdev-out tap6a6ac39c-61 --physdev-is-bridged -j neutron-openvswi-i6a6ac39c-6 
-A neutron-openvswi-sg-chain -m physdev --physdev-in tap6a6ac39c-61 --physdev-is-bridged -j neutron-openvswi-o6a6ac39c-6

# Conectividad entre las instancias

Las instancias aunque están en la misma red local, tienen diferentes reglas de cortafuegos
aplicadas, por lo que en principio no están conectadas.

Las reglas de seguridad que tenemos ahora mismo son:

[root@rdo ~]# neutron security-group-rule-list 
+--------------------------------------+----------------+-----------+----------+------------------+--------------+
| id                                   | security_group | direction | protocol | remote_ip_prefix | remote_group |
+--------------------------------------+----------------+-----------+----------+------------------+--------------+
| 5b611bbc-3422-4b81-beb0-0e935b2e88fe | default        | egress    | icmp     |                  |              |
| 6a218f81-7489-49e8-9b7d-808e24ac4c1d | default        | egress    | udp      | 0.0.0.0/0        |              |
| b65cf8d8-9b3b-4922-9a1e-14ac734cca9e | default        | egress    | tcp      |                  |              |
| e69a343a-3304-4ba1-ac3d-ae7208aad0d5 | default        | ingress   | icmp     | 0.0.0.0/0        |              |
+--------------------------------------+----------------+-----------+----------+------------------+--------------+

Las que vienen por defecto más el ping desde cualquier sitio (fuera o dentro).

Las máquinas hacen ping entre sí, pero no se puede acceder por ssh (por ejemplo).

Añadimos una regla de acceso por ssh desde 10.0.0.0/24

neutron security-group-rule-create --direction ingress --protocol tcp --port-range-min 22 --port-range-max 22 --remote-ip-prefix 10.0.0.0/24 default

Y ya podemos acceder por ssh entre las instancias

¿Qué aparece en iptables del nodo de computación?

[root@rdo ~]# iptables -S
...
-A neutron-openvswi-i6a6ac39c-6 -s 10.0.0.0/24 -p tcp -m tcp --dport 22 -j RETURN 
-A neutron-openvswi-ib079c24c-8 -s 10.0.0.0/24 -p tcp -m tcp --dport 22 -j RETURN
...

# Creamos otro proyecto, otro usuario (demo2)

Creamos una red y una subred con el mismo direccionamiento 10.0.0.0/2

Añadimos un grupo de seguridad y lanzamos una nueva instancia

# Listamos los puertos:

[root@rdo ~]# neutron port-list
+--------------------------------------+------+-------------------+---------------------------------------------------------------------------------+
| id                                   | name | mac_address       | fixed_ips                                                                       |
+--------------------------------------+------+-------------------+---------------------------------------------------------------------------------+
| 03b89c06-87a6-4532-ac7c-397e0b537bfa |      | fa:16:3e:f8:83:5a | {"subnet_id": "16786d0d-2252-4b86-9f5b-e1e5741b0a14", "ip_address": "10.0.0.2"} |
| 319ca3b4-5fe7-4f45-9b8a-eef0dfda0d87 |      | fa:16:3e:52:c2:89 | {"subnet_id": "16786d0d-2252-4b86-9f5b-e1e5741b0a14", "ip_address": "10.0.0.3"} |
+--------------------------------------+------+-------------------+---------------------------------------------------------------------------------+

De nuevo aparecen dos nuevos puertos y lógicamente se ha creado toda la estructura similar
a la de antes, en particular un nuevo proceso DHCP:

[root@rdo ~]# ip netns
qdhcp-f84a328e-407e-4ca6-87bb-ec148853c585
qdhcp-60346ea0-ed9d-40aa-a615-5dd3e33892bc

[root@rdo ~]# ps aux |grep --color 60346ea0-ed9d-40aa-a615-5dd3e33892bc
nobody    1142  0.0  0.0  12888   640 ?        S    13:26   0:00 dnsmasq --no-hosts --no-resolv --strict-order --bind-interfaces --interface=tap319ca3b4-5f --except-interface=lo --pid-file=/var/lib/neutron/dhcp/60346ea0-ed9d-40aa-a615-5dd3e33892bc/pid --dhcp-hostsfile=/var/lib/neutron/dhcp/60346ea0-ed9d-40aa-a615-5dd3e33892bc/host --dhcp-optsfile=/var/lib/neutron/dhcp/60346ea0-ed9d-40aa-a615-5dd3e33892bc/opts --leasefile-ro --dhcp-range=tag0,10.0.0.0,static,86400s --dhcp-lease-max=256 --conf-file= --domain=openstacklocal

# Vemos que se ha etiquetado una nueva VLAN:
[root@rdo ~]# ovs-vsctl show
...
    Bridge br-int
...
        Port "tap319ca3b4-5f"
            tag: 2
            Interface "tap319ca3b4-5f"
                type: internal
...
        Port "qvo03b89c06-87"
            tag: 2
            Interface "qvo03b89c06-87"
...

En la que están conectados el servidor DHCP y el nuevo bridge linux.

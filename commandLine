# The Linux Command Line
   
   "Freedom is a computer that is without secrets, one where everything
   can be known if you care enough to find out."

   "Graphical user interfaces make easy tasks easy, while command line
   interfaces make difficult tasks possible."

   Qué es el shell?
   Command line = shell
   El shell es un programa que toma comandos introducidos con el teclado y
   se los pasa al sistema operativo para que los ejecute.

   Terminal emulator
   Cuando se hace uso de la interfaz gráfica es necesario otro programa
   para interactuar con el shell, este es conocido como "terminal
   emulator".
   
   Virtual terminal
   Incluso si no se tiene un terminal emulator instalado, varias sesiones
   de terminal continuan ejecutándose detŕas del escritorio gráfico y son
   llamadas "virtual terminals" or "virtual consoles".

   Dato curioso sobre "/etc"
   Host-specific system-wide configuration files There has been controversy
   over the meaning of the name itself. In early versions of the UNIX
   Implementation Document from Bell labs, /etc is referred to as the
   etcetera directory, as this directory historically held everything that
   did not belong elsewhere (however, the FHS restricts /etc to static
   configuration files and may not contain binaries). Since the publication
   of early documentation, the directory name has been re-designated in
   various ways. Recent interpretations include backronyms such as
   "Editable Text Configuration" or "Extended Tool Chest".

   Qué son exactamente comandos?
   Un comando puede ser una de 4 cosas:
   -Un programa ejecutable. Dentro de esta categoría los programas pueden
   ser binarios compilados o programas escritos en lenguaje de script.
   Ejemplo: los comandos encontrados dentro de /usr/bin.
   -Un comando escritro dentro del propio shell. Estos son llamados shell
   builtins (órdenes internas del shell). Ejemplo: el comando cd o type.
   -Una función del shell. Scripts miniatura que pueden ser incorporados en
   el ambiente.
   -Un alias. Un comando creado por el usuario a partir de otro u otros
   comandos.

   Standard Input, Output and Error
   Manteniendo el tema Unix de que "todo es un archivo", programas como
   "ls" realmente envían sus resultados a un fichero especial llamado
   _standard output_ (a menudo expresado stdout) y sus mensajes de estado a
   otro archivo llamdo _standard error (sterr)_. Por defecto, tanto
   standard output y standard error son vinculados con la pantalla y no
   guardados en un fichero en disco.
   Adicionalmente, muchos programas toman entradas de un servicio llamado
   _standard input (stin)_, el cual está, por defecto, vinculado al
   teclado.
   # Redirigiendo el standard error.
      Redirigir el standard error carece de la facilidad de usar un
      operador de redirección dedicado. Para redirigir el standard error
      debemos referir a su "file descriptor". Un programa puede producir
      salida en cualquiera de varios flujos de archivos numerados. Mientras
      nos hemos referido a los primeros tres de estos flujos de archivo
      como standard input, output y error, el shell los referencia
      internamente como file descriptors 0, 1 y 2, respectivamente. El
      shell provee una notación para redirigir archivos usando el número
      del file descriptor. Dado que standard error es lo mismo que file
      descriptor 2, podemos redirigir standard error con esta notación:
      :~$ ls -l /bin/usr 2> ls-error
      El file descriptor "2" es colocado inmediatamente antes del operador
      de redirección para ejecutar la redirección del standard error al
      archivo _ls-error_.
   # Redirigiendo Standard Output and Standard Error a un archivo
      Hay dos maneras de hacer esto. Primero, la manera tradicional, la
      cual funciona con versiones antiguas del shell:
      :~$ ls -l /bin/usr > ls-output 2>&1
      nota: note que el orden de la redirección es significativo. La
      redirección del standard error debe siempre ocurrir después de
      redirigir standard output o no funciona.
      Versiones recientes de bash proveen un segundo, más simplificado
      método para ejecutar esta redirección combinada:
      :~$ ls -l /bin/usr &> ls-outpt

   wc--Print line, Word, and Byte Count.

   Expansión
   -Pathname expansion.
   -Tilde (~) expansion.
   -Arithmetic expansion.
   $((expression)). Ejemplo: echo $((2+2))
   Arithmetic expansion solo soporta enteros y puede ejecutar, entre otras:
   adición (+), sustracción (-), multiplicación (*), división (/), modulo
   (%), exponenciación (**).
   -Brace expansion.
   Patrones a ser expandidos por corchetes pueden contener una porción al
   principio llamada "preámbulo" y otra en la cola llamada "postscript".
   -Parameter expansion.
   -Command substitution.

   Quoting
   Es un mecanismo para selectivamente suprimir indeseadas expansiones.
   # Comillas dobles
   Si colocas texto dentro de comillas dobles, todos los caracteres
   utilizados por el shell pierden su significado especial y son tratados
   como caracteres ordinarios. Las excepciones son $ (dollar sign), \
   (backslash) and ` (back tick). Esto significa que la separación de
   palabras, pathname expansion, tilde expansion y brace expansion son
   suprimidas, pero parameter expansion, arithmetic expansion y command
   substitution aún son llevadas a cabo.
   Con comillas dobles podemos sobrellevar con nombres de archivos con
   espacios en blanco embebidos:
   :~$ ls -l "two words.txt"; al colocar entre comillas dobles, detenemos
   la separación de palabras.
   :~$ mv "two words.txt" two_words.txt
   # Comillas simples
   Si necesitamos suprimir todas las expansiones, usamos comillas simples
   :~$ echo 'text ~/*.txt {a,b} $(echo foo) $((2+2)) $USER'

   El ambiente
   El shell mantiene un cuerpo de información durante nuestra sesión de
   shell llamado "The enviroment". Los datos almacenados en el ambiente son
   utilizados por los programas para determinar hechos acerca de nuestra
   configuración.
   El shell almacena dos tipos básicos de datos en el ambiente: las
   variables de ambiente y las variables de shell. Adicionalmente a las
   variables, el shell almacena data programatica, llamada: alias y
   funciones de shell.
   # Cómo es establecido el ambiente?
   Cuando nos logueamos en el sistema, el programa bash inicia y lee una
   serie de scripts de configuración llamados "startup files", los cuales
   definen el ambiente por defecto compartido por todos los usuarios. Esto
   es seguido por más startup files en nuestro home directory que definen
   nuestro ambiente personal. La secuencia exacta depende del tipo de
   sesión de shelll que haya sido iniciada.
   # Login and Non-login Shells
   Hay dos tipos de sesiones de shell: una login shell session y una
   non-login shell session (sesión en la que se solicita datos de ingreso
   y sesión en la que no se solicita datos de ingreso)
   Una login shell session es una en la cual nos es solicitado nuestro
   nombre de usuario y una contraseña; por ejemplo, cuando iniciamos una
   virutal console session. Una non-login shell session típicamente ocurre
   cuando lanzamos una terminal session en la GUI.
   Una login shell session lee uno o más startup files:
   /etc/profile      Un script de configuración global que aplica a todos
                     los usuarios.
   ~/.bash_profile   A startup file personal de un usuario. Puede ser
                     usado para extender o anular configuraciones en el
                     script de configuración global.
   ~/.bash_login     Si ~/.bash_profile no es encontrado, bash intenta leer
                     este script.
   ~/.profile        Si ~/.bash_profile ni ~/.bash_login son encontrados,
                     bash intenta leer este archivo. Este es el startup
                     file por defecto de distribuciones basadas en Debian.
   Una non-login shell session lee los startup files de la siguiente forma:
   /etc/bash.bashrc  Un script de configuración global que aplica a todos
                     los usuarios.
   ~/.bashrc         A startup file personal de un usuario. Puede ser usado
                     para extender o anular configuraciones en el script de
                     configuración global.
   Adicionalmente a leer los archivos mencionados anteriormente, una
   non-login shell session hereda el ambiente de su proceso padre,
   usualmente una login session.

   

  EXPRESIONES REGULARES

  Definición: son notaciones simbólicas usadas para identificar patrones de
  texto.
  El principal programa para trabajar con Expresiones Regulares es: grep
  (Global Regular Expression Print).
  Grep sintaxis: grep [opciones] regex [fichero...]
  Grep opciones: 
  -i (Ignorar case. Formato largo: --ignore-case)
  -v (Invertir coincidencia. Generalmente grep muestra las líneas que
  contienen una coincidencia. Esta opción produce que grep imprima cada
  línea que no contiene una coincidencia. Formato largo: --invert-match)
  -c (Imprime el número de coincidencias o no coincidencias si la opcion -v
  está también especificada, en vez de las líneas propiamente. Formato
  largo: --count)
  -n (Antecede cada línea coincidente con el número de línea dentro del
  fichero. Formato largo: --line-number)
  -l (Imprime el nombre de cada archivo que contiene una coincidencia en
  lugar de las líneas. Formato largo: --files-with-matches)
  -L (Como -l pero imprime el nombre de los archivos que no tienen
  coincidencias. Formato largo: --files-without-match)
  -h (Para búsquedas en múltiples ficheros suprime la salida del nombre de
  fichero. Formato largo: --no-filename)

  Metacaracteres y literales
  Los metacaracteres en las expresiones regulares consisten de: 
  ^ $ . [ ] { } - ? * + ( ) | \
  utilizados para especificar coincidencias más complejas.
  Todos los otros caracteres son considerados literales, aunque el
  backslash es usado en pocos casos para crear metasecuencias, así como
  permitir a los metacaracteres ser escapados y ser tratados como
  literales.

  Meta: cualquier caracter.
  Es representado por el punto (.), el cual es utilizado para coincidir con
  cualquier caracter. Incuido en un expresión regular, coincidirá con
  cualquier caracter en la posisición del punto (.). Ejemplo:
  grep -h '.zip' foo*.txt
  Meta: anclas.
  Los símbolos caret (^) y dollar ($) son tratados como "anclas" en las
  expresiones regulares. Esto significa que la coincidencia ocurre si la
  expresión regular es encontrada al principio de la línea (^) o al final
  de la línea ($). Ejemplo:
  grep -h '^zip' foo*.txt
  grep -h 'zip$' foo*.txt
  Meta: expresiones entre corchetes y clases de caracteres.
  Podemos coincidir un solo caracter de un conjunto especificado de
  caracteres usando expresiones entre corchetes. Con expresiones entre
  corchetes, podemos especificar un conjunto de caracteres (incluso
  caracteres que de otra forma serían interpretados como metacaracteres) a
  coincidir. Ejemplo:
  En este ejemplo, usando un conjunto de dos caracteres, coincidiremos
  cualquier línea que contenga la cadena bzip o gzip.
  grep -h '[bg]zip' foo*.txt
  Un conjunto puede contener cualquier número de caracteres, y los
  metacaracteres pierden su significado especial cuando están entre
  corchetes. Hay dos casos en que los metacaracteres tienen un significado
  distinto dentro de corchetes. El primero es el caret (^) el cual es usado
  para indicar negación; el segundo es el guíon (-) el cual es usado para
  indicar un rango de caracteres.
    Negación
    Si el primer caracter en una expresión entre corchetes es el caret (^),
    los caracteres restantes son considerados como un conjunto que no debe
    estar presente en la posición del caracter dada. Ejemplo:
    grep -h '[^bg]zip' foo*.txt
    Rango de caracteres tradicional
    grep -h '[A-Z]' foo*.txt
    Cualquier rango de caracteres puede ser expresado de esta manera,
    incluyendo múltiples rangos como la siguiente expresión, la cual
    coincidirá todos los nombres de ficheros que empiecen con letras y
    números:
    grep -h '^[A-Za-z0-9]' foo*.txt
    Para que el guíon sea tratado como tal y no de manera especial, basta
    con ponerlo como el primer caracter de la expresión:
    grep -h '[-AZ]' foo*.txt
    esto coincidira con cualquier nombre de archivo que contenga un guión,
    una letra A o una letra Z.

  POSIX Básicas vs Extendidas Expresiones Regulares.
  POSIX divide las Expresiones Regulares en Básicas (BRE) y Extendidas
  (ERE) de acuerdo al uso de los metacaracteres. Para las BRE tenemos: ^ $
  . [ ] * (todos los demás se consideran literales). Para las ERE tenemos: ( ) { } ? + |.
  Dato curioso en las BRE los metacaracteres () {} son tratados como tal,
  si van precedido de un backslash, mientras que en las ERE cualquier
  metacaracter es tratado como un literal si es escapado. 
  Extended Regular Expressions
    Alternación
    Es la utilidad que permite a una coincidencia ocurrir de entre un
    conjunto de expresiones. Una expresión entre corchetes permite a un
    simple caracter coincidir de un conjunto de caracteres, la alternación
    permite coincidencias de un conjunto de cadena de caracteres o otro
    expresión regular. Ejemplo:
    echo "AAA" | grep -E 'AAA|BBB'
    Aquí vemos la expresión regular 'AAA|BBB', la cual significa "coincide
    la cadena AAA o la cadena BBB. Nótese que al ser esta una
    característica extendida, se ha añadido la opcón -E. 
    La alternación no está límita a dos opciones, veamos dos ejemplos más:
    echo "CCC" | grep -E 'AAA|BBB|CCC'
    grep -Eh '^(bz|gz|zip)' foo*.txt
    En este último ejemplo, para que la alternación sea interpretada
    correctamente (coincidir con bz, gz o zip al principio de la cadena),
    es necesario encerrar la expresión entre (). Sin el uso de los
    paréntesis: grep -Eh '^bz|gz|zip' foo*.txt, se leería como cualquier
    coincidencia que tenga bz al principio, o contenga gz o contenga zip.
    Cuantificadores
    Las ERE tienen varias maneras de especificar el número de veces que un
    elemento es coincidido.
    ?- Coincide un elemento cero o una vez: Este cunatificador significa,
    en efecto, "Haz el elemento precedente opcional".
    *- Coincide un elemento cero o más veces: El * es usado para denotar un
    elemento opcional, sin embargo, a diferencia del ?, el ítem puede
    ocurrir cualquier número de veces, no solo una vez.
    +- Coincide un elemento una o más veces: El + metacaracter es muy
    parecido a *, excepto que el requiere al menos una instancia de un
    elemento precedente.

    Summary: date, cal, df, free, pwd, cd, ls, file, less, cp, mv, mkdir,
    rm, ln, type, which, man, apropos, info, whatis, alias, help, cat,
    sort, uniq, wc, grep, head, tail, tee, echo, history, clear, id, chmod,
    umask, su, sudo, chown, chgrp, passwd, ps, top, jobs, bg, fg, kill,
    killall, shutdown, printenv, set, export
